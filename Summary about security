COMMON ATTACKS:
1. Compromised database (hacker can access the DB)
    - Strongly encrypt passwords with salt and hash (bcrypt)
    - Strongly encrypt password reset token (SHA 256)
2. Brute force attacks
    - Use 'bcrypt' (to make login requests slow)
    - Implement rate limiting (express-rate-limit)
    - Implement maximum login attempts
3. Cross-site scripting(XSS) attacks
    - Store JWT in HTTPOnly cookies
    - Sanitize iser input data
    - Set special HTTP headers (helmet package)
4. Denial-of-service(DOS) attack
    - Implement rate limiting (express-rate-limit)
    - Limit body payload(in body-parser)
    - Avoid evil regular expressions
5. NoSQL query injection
    - Use mongoose for MongoDB (because of SchemaTypes)

OTHER BEST PRACTICES AND SUGGECTIONS
* Always user HTTPS
* Create random password reset tokens with expiry dates
* Deny access to JWT after password change
* Don't commit sensitive config data to Git
* Don't send error details to clients
- Prevent Cross-Site Request Forgery(csurf package)
- Require re-authentication before a high-value action
- Implement a blacklist of untrusted JWT
- Confirm user email address after creating account
- keep user logged in with refresh tokens
- implement two-factor authentication
- Prevent parameter pollution causing Uncaught Exceptions